// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Administrator
  Staff
  PMD
  Approver
}

enum PLSType {
Official
Personal
}

enum Statuses {
  Approved
  Pending
  Declined
}

model User {
  id            String       @id @default(cuid()) @unique
  empId         String       @unique
  name          String
  contactNo     String?
  address       String?
  email         String       @unique
  password      String
  role          Role @default(Staff)
  image         String?   @db.Text
  resetPasswordToken String? @unique
  resetPasswordTokenExpiry DateTime?
  createdAt     DateTime @default(now())
  updatedBy     String?
  deletedAt     DateTime?
  department    Department[]
  pls           PLS[]
  payslip       Payslip[]
  leave         Leave[]
}

model Department {
  id          String @id @default(cuid()) @unique
  name        String
  description String?
  createdAt   String 
  updatedBy   String?
  deletedAt   DateTime?
  userId      String
  user        User @relation(fields: [userId], references: [id])
}

model PLS {
  id          String @id @default(cuid()) @unique
  plsType     PLSType
  destination String
  description String?
  timeIn      String?
  timeOut     String?
  status      Statuses @default(Pending)
  createdAt   DateTime @default(now())
  userId      String
  user        User @relation(fields: [userId], references: [id])
}

model Payslip {
  id          String @id @default(cuid()) @unique
  month       String
  year        String
  firstHalf     String
  secondHalf     String
  userId      String
  user        User @relation(fields: [userId], references: [id])
}

model Leave {
  id          String @id @default(cuid()) @unique
  startDate   DateTime
  endDate     DateTime
  reason      String
  status      Statuses @default(Pending)
  leaveBalance Float
  createdAt   DateTime @default(now())
  userId      String
  user        User @relation(fields: [userId], references: [id])
  leaveType   LeaveType[]
}

model LeaveType {
  id          String @id @default(cuid()) @unique
  name        String
  description String?
  createdAt   DateTime @default(now())
  leaveId     String
  leave       Leave @relation(fields: [leaveId], references: [id])
}



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Administrator
  Staff
  PMD
  Approver
}

enum PLSType {
  Official
  Personal
}

enum Statuses {
  Approved
  Pending
  Declined
}

model User {
  id            String       @id @default(cuid()) @unique
  empId         String       @unique
  name          String
  contactNo     String?
  address       String?
  email         String       @unique
  password      String
  role          Role @default(Staff)
  image         String?   @db.Text
  resetPasswordToken String? @unique
  resetPasswordTokenExpiry DateTime?
  createdAt     DateTime @default(now())
  createdBy     String?
  updatedBy     String?
  deletedAt     DateTime?
  deptId        String?
  department    Department? @relation(fields: [deptId], references: [id])
  pls           PLS[] @relation("PLSToUser")
  forApprovalPLS PLS[] @relation("ApproverToPLS")
  payslip       Payslip[] @relation("UserToPayslip")
  forApprovalPayslip Payslip[] @relation("ApproverToPayslip")
  leave         Leave[] @relation("UserToLeave")
  forApprovalLeaves Leave[] @relation("ApproverToLeave")
  approverId    String? 
}


model Department {
  id          String @id @default(cuid()) @unique
  name        String
  description String?
  createdAt   String 
  updatedBy   String?
  deletedAt   DateTime?
  user        User[]
}

model PLS {
  id          String @id @default(cuid()) @unique
  plsDate     DateTime
  plsType     PLSType
  destination String
  description String?
  timeIn      String?
  timeOut     String?
  status      Statuses @default(Pending)
  createdAt   DateTime @default(now())
  userId      String
  user        User @relation("PLSToUser",fields: [userId], references: [id])
  approverId  String?
  approver    User? @relation("ApproverToPLS", fields: [approverId], references: [id])
}

model Payslip {
  id          String @id @default(cuid()) @unique
  month       String
  year        String
  firstHalf   String
  secondHalf  String
  userId      String
  user        User @relation("UserToPayslip",fields: [userId], references: [id])
  approverId  String
  approver    User @relation("ApproverToPayslip", fields: [approverId], references: [id])
}

model Leave {
  id          String @id @default(cuid()) @unique
  startDate   String
  endDate     String
  reason      String
  approverRemarks String?
  status      Statuses @default(Pending)
  leaveBalance Float?
  createdAt   DateTime @default(now())
  userId      String
  user        User @relation("UserToLeave", fields: [userId], references: [id])
  leaveTypeId String
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [id])
  approverId  String?
  approver    User? @relation("ApproverToLeave", fields: [approverId], references: [id])
}

model LeaveType {
  id          String @id @default(cuid()) @unique
  name        String
  description String?
  createdAt   DateTime @default(now())
  leave       Leave[]
}